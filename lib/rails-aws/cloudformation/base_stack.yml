AWSTemplateFormatVersion: "2010-09-09"
Resources:
  vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: "172.31.0.0/16"
      Tags:
      - Key: "Name"
        Value: "<%= stack_name %>"
  gateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: "Name"
        Value: "<%= stack_name %>"
  attachgateway:
   Type: "AWS::EC2::VPCGatewayAttachment"
   Properties:
     VpcId:
       Ref: "vpc"
     InternetGatewayId: 
       Ref: "gateway"
  subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1b"
      VpcId:
        Ref: "vpc" 
      CidrBlock: "172.31.0.0/20"
      Tags:
       - Key: "Name"
         Value: "<%= stack_name %>-1"
  subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c"
      VpcId:
        Ref: "vpc" 
      CidrBlock: "172.31.16.0/20"
      Tags:
       - Key: "Name"
         Value: "<%= stack_name %>-2"

  RouteTable : 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: 
        Ref: "vpc"
      Tags:
       - Key: "Name"
         Value: "<%= stack_name %>"
  Route: 
    Type: "AWS::EC2::Route"
    DependsOn: "attachgateway"
    Properties: 
      RouteTableId: 
        Ref: "RouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: 
        Ref : "gateway" 
  SubnetRouteTableAssociation: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      SubnetId: 
        Ref: "subnet1" # this is the public subnet
      RouteTableId: 
        Ref: "RouteTable" 
  NetworkAcl: 
    Type: "AWS::EC2::NetworkAcl"
    Properties: 
      VpcId: 
        Ref: "vpc"
      Tags:
       - Key: "Name"
         Value: "<%= stack_name %>"
   
  InboundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: 
        Ref: "NetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange: 
        From: "0"
        To: "65535"
  
  OutBoundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: 
        Ref: "NetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange: 
        From: "0"
        To: "65535"
  SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: 
        Ref: "subnet1"
      NetworkAclId: 
        Ref: "NetworkAcl"
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable Access to Rails application via port 80, 443, 3000 and SSH access via port 22"
      VpcId: 
        Ref: "vpc" 
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: "80"
        ToPort: "80"
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "0.0.0.0/0"
      Tags:
       - Key: "Name"
         Value: "<%= stack_name %>"
  SecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: "-1"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: 
        "Fn::GetAtt": 
        - "SecurityGroup"
        - "GroupId"
      GroupId: 
        "Fn::GetAtt": 
        - "SecurityGroup"
        - "GroupId"
